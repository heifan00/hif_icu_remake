<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SpringBoot实现多数据源，动态切换数据源</title>
    <link href="/springboot_dynmic/"/>
    <url>/springboot_dynmic/</url>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>单体系统和SaaS系统之间的数据传输，单体系统只有一个数据库链接，SaaS系统拥有N个数据库链接，并且有单独的租户系统来维护所有租户的数据库链接。</p><h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><p>SpringBoot内置了一个AbstractRoutingDataSource抽象类，将所有数据源装入map，然后可以根据不同的key返回不同的数据源。当SpringBoot开始执行连接数据库之前会执行determineCurrentLookupKey()方法，这个方法返回的数据将作为key去map中查找相应的数据源。</p><p>关于AbstractRoutingDataSource抽象类的简单说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractRoutingDataSource</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractDataSource</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InitializingBean</span> &#123;<br>        <span class="hljs-comment">// 目标数据源map集合，存储将要切换的多数据源bean信息</span><br>        <span class="hljs-meta">@Nullable</span><br>        <span class="hljs-keyword">private</span> Map&lt;Object, Object&gt; targetDataSources;<br>        <span class="hljs-comment">// 未指定数据源时的默认数据源对象</span><br>        <span class="hljs-meta">@Nullable</span><br>        <span class="hljs-keyword">private</span> Object defaultTargetDataSource;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">lenientFallback</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-comment">// 数据源查找接口，通过该接口的getDataSource(String dataSourceName)获取数据源信息</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">DataSourceLookup</span> <span class="hljs-variable">dataSourceLookup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JndiDataSourceLookup</span>();<br>        <span class="hljs-comment">// 解析targetDataSources之后的DataSource的map集合</span><br>        <span class="hljs-meta">@Nullable</span><br>        <span class="hljs-keyword">private</span> Map&lt;Object, DataSource&gt; resolvedDataSources;<br>        <span class="hljs-meta">@Nullable</span><br>        <span class="hljs-keyword">private</span> DataSource resolvedDefaultDataSource;<br>    <br>        <span class="hljs-comment">// 将targetDataSources的内容转化一下放到resolvedDataSources中，将defaultTargetDataSource转为DataSource赋值给resolvedDefaultDataSource</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-comment">// 如果目标数据源为空，会抛出异常，在系统配置时应至少传入一个数据源</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.targetDataSources == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Property &#x27;targetDataSources&#x27; is required&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 初始化resolvedDataSources的大小</span><br>                <span class="hljs-built_in">this</span>.resolvedDataSources = CollectionUtils.newHashMap(<span class="hljs-built_in">this</span>.targetDataSources.size());<br>                <span class="hljs-comment">// 遍历目标数据源信息map集合，对其中的key，value进行解析</span><br>                <span class="hljs-built_in">this</span>.targetDataSources.forEach((key, value) -&gt; &#123;<br>                    <span class="hljs-comment">// resolveSpecifiedLookupKey方法没有做任何处理，只是将key继续返回</span><br>                    <span class="hljs-type">Object</span> <span class="hljs-variable">lookupKey</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.resolveSpecifiedLookupKey(key);<br>                    <span class="hljs-comment">// 将目标数据源map集合中的value值（德鲁伊数据源信息）转为DataSource类型</span><br>                    <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.resolveSpecifiedDataSource(value);<br>                    <span class="hljs-comment">// 将解析之后的key，value放入resolvedDataSources集合中</span><br>                    <span class="hljs-built_in">this</span>.resolvedDataSources.put(lookupKey, dataSource);<br>                &#125;);<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.defaultTargetDataSource != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">// 将默认目标数据源信息解析并赋值给resolvedDefaultDataSource</span><br>                    <span class="hljs-built_in">this</span>.resolvedDefaultDataSource = <span class="hljs-built_in">this</span>.resolveSpecifiedDataSource(<span class="hljs-built_in">this</span>.defaultTargetDataSource);<br>                &#125;<br>    <br>            &#125;<br>        &#125;<br>    <br>        <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">resolveSpecifiedLookupKey</span><span class="hljs-params">(Object lookupKey)</span> &#123;<br>            <span class="hljs-keyword">return</span> lookupKey;<br>        &#125;<br>    <br>        <span class="hljs-keyword">protected</span> DataSource <span class="hljs-title function_">resolveSpecifiedDataSource</span><span class="hljs-params">(Object dataSource)</span> <span class="hljs-keyword">throws</span> IllegalArgumentException &#123;<br>            <span class="hljs-keyword">if</span> (dataSource <span class="hljs-keyword">instanceof</span> DataSource) &#123;<br>                <span class="hljs-keyword">return</span> (DataSource)dataSource;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (dataSource <span class="hljs-keyword">instanceof</span> String) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.dataSourceLookup.getDataSource((String)dataSource);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Illegal data source value - only [javax.sql.DataSource] and String supported: &quot;</span> + dataSource);<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-comment">// 因为AbstractRoutingDataSource继承AbstractDataSource，而AbstractDataSource实现了DataSource接口，所有存在获取数据源连接的方法</span><br>        <span class="hljs-keyword">public</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.determineTargetDataSource().getConnection();<br>        &#125;<br>    <br>        <span class="hljs-keyword">public</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">(String username, String password)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.determineTargetDataSource().getConnection(username, password);<br>        &#125;<br>    <br>        <span class="hljs-keyword">protected</span> DataSource <span class="hljs-title function_">determineTargetDataSource</span><span class="hljs-params">()</span> &#123;<br>            Assert.notNull(<span class="hljs-built_in">this</span>.resolvedDataSources, <span class="hljs-string">&quot;DataSource router not initialized&quot;</span>);<br>            <span class="hljs-comment">// 调用实现类中重写的determineCurrentLookupKey方法拿到当前线程要使用的数据源的名称</span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">lookupKey</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.determineCurrentLookupKey();<br>            <span class="hljs-comment">// 去解析之后的数据源信息集合中查询该数据源是否存在，如果没有拿到则使用默认数据源resolvedDefaultDataSource</span><br>            <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> (DataSource)<span class="hljs-built_in">this</span>.resolvedDataSources.get(lookupKey);<br>            <span class="hljs-keyword">if</span> (dataSource == <span class="hljs-literal">null</span> &amp;&amp; (<span class="hljs-built_in">this</span>.lenientFallback || lookupKey == <span class="hljs-literal">null</span>)) &#123;<br>                dataSource = <span class="hljs-built_in">this</span>.resolvedDefaultDataSource;<br>            &#125;<br>    <br>            <span class="hljs-keyword">if</span> (dataSource == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;Cannot determine target DataSource for lookup key [&quot;</span> + lookupKey + <span class="hljs-string">&quot;]&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> dataSource;<br>            &#125;<br>        &#125;<br>    <br>        <span class="hljs-meta">@Nullable</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> Object <span class="hljs-title function_">determineCurrentLookupKey</span><span class="hljs-params">()</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">druid:</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>      <span class="hljs-attr">master:</span><br>        <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://xxxx:3306/apis?useSSL=false&amp;useUnicode=true&amp;autoReconnect=true&amp;failOverReadOnly=false</span><br>        <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>        <span class="hljs-attr">password:</span> <span class="hljs-string">xxxxxx</span><br>        <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br></code></pre></td></tr></table></figure><h3 id="包含的类"><a href="#包含的类" class="headerlink" title="包含的类"></a>包含的类</h3><ul><li>DynamicDataSource # 重写动态数据源</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 动态数据源</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> HiF</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023/10/24 21:52</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicDataSource</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractRoutingDataSource</span> &#123;<br>    <span class="hljs-comment">//备份所有数据源信息，</span><br>    <span class="hljs-keyword">private</span> Map&lt;Object, Object&gt; defineTargetDataSources;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 决定当前线程使用哪个数据源</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">determineCurrentLookupKey</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> DynamicDataSourceHolder.getDynamicDataSourceKey();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>DynamicDataSourceHolder # 数据源切换处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数据源切换处理</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> HiF</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023/10/24 20:46</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicDataSourceHolder</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 保存动态数据源名称</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;String&gt; DYNAMIC_DATASOURCE_KEY = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置/切换数据源，决定当前线程使用哪个数据源</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDynamicDataSourceKey</span><span class="hljs-params">(String key)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;数据源切换为：&#123;&#125;&quot;</span>,key);<br>        DYNAMIC_DATASOURCE_KEY.set(key);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取动态数据源名称，默认使用mater数据源</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getDynamicDataSourceKey</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> DYNAMIC_DATASOURCE_KEY.get();<br>        <span class="hljs-keyword">return</span> key == <span class="hljs-literal">null</span> ? DataSourceConstant.MASTER : key;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 移除当前数据源</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeDynamicDataSourceKey</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;移除数据源：&#123;&#125;&quot;</span>,DYNAMIC_DATASOURCE_KEY.get());<br>        DYNAMIC_DATASOURCE_KEY.remove();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>DruidConfig # 数据源配置类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数据源配置</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> HiF</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023/10/24 21:53</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableAutoConfiguration(exclude = &#123;DataSourceAutoConfiguration.class&#125;)</span><br><span class="hljs-meta">@MapperScan(&quot;com.heifan.demo.dao&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DruidConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean(name = DataSourceConstant.MASTER)</span><br>    <span class="hljs-meta">@ConfigurationProperties(&quot;spring.datasource.druid.master&quot;)</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">masterDataSource</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> DruidDataSourceBuilder.create().build();<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Primary</span><br>    <span class="hljs-keyword">public</span> DynamicDataSource <span class="hljs-title function_">dynamicDataSource</span><span class="hljs-params">()</span><br>    &#123;<br>        Map&lt;Object, Object&gt; dataSourceMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">2</span>);<br>        dataSourceMap.put(DataSourceConstant.MASTER,masterDataSource());<br>        <span class="hljs-comment">//设置动态数据源</span><br>        <span class="hljs-type">DynamicDataSource</span> <span class="hljs-variable">dynamicDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DynamicDataSource</span>();<br>        dynamicDataSource.setDefaultTargetDataSource(masterDataSource());<br>        dynamicDataSource.setTargetDataSources(dataSourceMap);<br>        <span class="hljs-comment">//将数据源信息备份在defineTargetDataSources中</span><br>        dynamicDataSource.setDefineTargetDataSources(dataSourceMap);<br>        <span class="hljs-keyword">return</span> dynamicDataSource;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>DataSourceUtil # 数据源工具类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数据源工具类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> HiF</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023/10/24 21:54</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataSourceUtil</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    DynamicDataSource dynamicDataSource;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据传递的数据源信息测试数据库连接</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> DruidDataSource <span class="hljs-title function_">createDataSourceConnection</span><span class="hljs-params">(DataSourceInfo dataSourceInfo)</span> &#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">druidDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        druidDataSource.setUrl(dataSourceInfo.getUrl());<br>        druidDataSource.setUsername(dataSourceInfo.getUserName());<br>        druidDataSource.setPassword(dataSourceInfo.getPassword());<br>        druidDataSource.setBreakAfterAcquireFailure(<span class="hljs-literal">true</span>);<br>        druidDataSource.setConnectionErrorRetryAttempts(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            druidDataSource.getConnection(<span class="hljs-number">2000</span>);<br>            log.info(<span class="hljs-string">&quot;数据源连接成功&quot;</span>);<br>            <span class="hljs-keyword">return</span> druidDataSource;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            log.error(<span class="hljs-string">&quot;数据源 &#123;&#125; 连接失败,用户名：&#123;&#125;，密码 &#123;&#125;&quot;</span>,dataSourceInfo.getUrl(),dataSourceInfo.getUserName(),dataSourceInfo.getPassword());<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将新增的数据源加入到备份数据源map</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addDefineDynamicDataSource</span><span class="hljs-params">(DruidDataSource druidDataSource, String dataSourceName)</span>&#123;<br>        Map&lt;Object, Object&gt; defineTargetDataSources = dynamicDataSource.getDefineTargetDataSources();<br>        defineTargetDataSources.put(dataSourceName, druidDataSource);<br>        dynamicDataSource.setTargetDataSources(defineTargetDataSources);<br>        dynamicDataSource.afterPropertiesSet();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>DruidConfig类需要加上**@EnableAutoConfiguration(exclude &#x3D; {DataSourceAutoConfiguration.class})** ，不然项目启动会报错循环依赖。</p></li><li><p>DruidConfig类加上**@MapperScan(“com.heifan.demo.dao”)** ，启动类就不需要写了。</p></li></ol><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicController</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    DataSourceUtil dataSourceUtil;<br><br>    <span class="hljs-meta">@Resource</span><br>    UrlClDao urlClDao;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/test&quot;)</span><br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">dynamicDataSourceTest</span><span class="hljs-params">()</span>&#123;<br>        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">// 主库查询</span><br>        List&lt;UrlCl&gt; urlCls = urlClDao.selectList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;());<br>        urlCls.forEach(item -&gt; &#123;<br>            log.info(<span class="hljs-string">&quot;链接：&#123;&#125;&quot;</span>,item.getUrlStr());<br>        &#125;);<br>        <span class="hljs-comment">//在从库中查询</span><br>       DynamicDataSourceHolder.setDynamicDataSourceKey(DataSourceConstant.DB_2);<br>        <span class="hljs-type">DataSourceInfo</span> <span class="hljs-variable">dataSourceInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceInfo</span>();<br>        dataSourceInfo.setUrl(<span class="hljs-string">&quot;jdbc:mysql://sql.xxxx.xxxxx.com:3306/xxxx?useSSL=false&amp;useUnicode=true&amp;autoReconnect=true&amp;failOverReadOnly=false&quot;</span>);<br>        dataSourceInfo.setUserName(<span class="hljs-string">&quot;xxxxx&quot;</span>);<br>        dataSourceInfo.setPassword(<span class="hljs-string">&quot;xxxxx&quot;</span>);<br>        dataSourceInfo.setKeyCode(<span class="hljs-string">&quot;test&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;dataSource&quot;</span>,dataSourceInfo);<br>        log.info(<span class="hljs-string">&quot;数据源信息：&#123;&#125;&quot;</span>,dataSourceInfo);<br>        <span class="hljs-comment">//测试数据源连接</span><br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">druidDataSource</span> <span class="hljs-operator">=</span> dataSourceUtil.createDataSourceConnection(dataSourceInfo);<br>        <span class="hljs-keyword">if</span> (Objects.nonNull(druidDataSource))&#123;<br>            <span class="hljs-comment">//将新的数据源连接添加到目标数据源map中</span><br>            dataSourceUtil.addDefineDynamicDataSource(druidDataSource,dataSourceInfo.getKeyCode());<br>            <span class="hljs-comment">//设置当前线程数据源名称-----代码形式</span><br>            DynamicDataSourceHolder.setDynamicDataSourceKey(dataSourceInfo.getKeyCode());<br>            <span class="hljs-comment">//在新的数据源中查询用户信息</span><br>            urlCls = urlClDao.selectList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;());<br>            urlCls.forEach(item -&gt; &#123;<br>                log.info(<span class="hljs-string">&quot;从表链接：&#123;&#125;&quot;</span>,item.getUrlStr());<br>            &#125;);<br>            <span class="hljs-comment">//关闭数据源连接</span><br>            druidDataSource.close();<br>        &#125;<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>可以看到主库和从库查到的信息不一样，切换数据源成功，测试成功。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">2023</span>-<span class="hljs-number">10</span>-<span class="hljs-number">24</span> <span class="hljs-number">21</span>:<span class="hljs-number">40</span>:<span class="hljs-number">32</span>,<span class="hljs-number">785</span> INFO <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.u</span><span class="hljs-selector-class">.servlet</span> <span class="hljs-selector-attr">[ServletContextImpl.java : 371]</span> <span class="hljs-selector-attr">[]</span> Initializing Spring DispatcherServlet <span class="hljs-string">&#x27;dispatcherServlet&#x27;</span><br><span class="hljs-number">2023</span>-<span class="hljs-number">10</span>-<span class="hljs-number">24</span> <span class="hljs-number">21</span>:<span class="hljs-number">40</span>:<span class="hljs-number">32</span>,<span class="hljs-number">785</span> INFO o<span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.w</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.DispatcherServlet</span> <span class="hljs-selector-attr">[FrameworkServlet.java : 525]</span> <span class="hljs-selector-attr">[]</span> Initializing Servlet <span class="hljs-string">&#x27;dispatcherServlet&#x27;</span><br><span class="hljs-number">2023</span>-<span class="hljs-number">10</span>-<span class="hljs-number">24</span> <span class="hljs-number">21</span>:<span class="hljs-number">40</span>:<span class="hljs-number">32</span>,<span class="hljs-number">786</span> INFO o<span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.w</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.DispatcherServlet</span> <span class="hljs-selector-attr">[FrameworkServlet.java : 547]</span> <span class="hljs-selector-attr">[]</span> Completed initialization <span class="hljs-keyword">in</span> <span class="hljs-number">1</span> ms<br><span class="hljs-number">2023</span>-<span class="hljs-number">10</span>-<span class="hljs-number">24</span> <span class="hljs-number">21</span>:<span class="hljs-number">40</span>:<span class="hljs-number">32</span>,<span class="hljs-number">938</span> INFO c<span class="hljs-selector-class">.a</span><span class="hljs-selector-class">.d</span><span class="hljs-selector-class">.p</span><span class="hljs-selector-class">.DruidDataSource</span> <span class="hljs-selector-attr">[DruidDataSource.java : 998]</span> <span class="hljs-selector-attr">[]</span> &#123;dataSource-<span class="hljs-number">1</span>&#125; inited<br><span class="hljs-number">2023</span>-<span class="hljs-number">10</span>-<span class="hljs-number">24</span> <span class="hljs-number">21</span>:<span class="hljs-number">40</span>:<span class="hljs-number">33</span>,<span class="hljs-number">296</span> DEBUG c<span class="hljs-selector-class">.h</span><span class="hljs-selector-class">.d</span><span class="hljs-selector-class">.d</span><span class="hljs-selector-class">.U</span><span class="hljs-selector-class">.selectList</span> <span class="hljs-selector-attr">[BaseJdbcLogger.java : 137]</span> <span class="hljs-selector-attr">[]</span> ==&gt;  Preparing: SELECT id,url_name,url_str,create_time,modify_time,is_enable FROM url_cl<br><span class="hljs-number">2023</span>-<span class="hljs-number">10</span>-<span class="hljs-number">24</span> <span class="hljs-number">21</span>:<span class="hljs-number">40</span>:<span class="hljs-number">33</span>,<span class="hljs-number">316</span> DEBUG c<span class="hljs-selector-class">.h</span><span class="hljs-selector-class">.d</span><span class="hljs-selector-class">.d</span><span class="hljs-selector-class">.U</span><span class="hljs-selector-class">.selectList</span> <span class="hljs-selector-attr">[BaseJdbcLogger.java : 137]</span> <span class="hljs-selector-attr">[]</span> ==&gt; Parameters: <br><span class="hljs-number">2023</span>-<span class="hljs-number">10</span>-<span class="hljs-number">24</span> <span class="hljs-number">21</span>:<span class="hljs-number">40</span>:<span class="hljs-number">33</span>,<span class="hljs-number">347</span> DEBUG c<span class="hljs-selector-class">.h</span><span class="hljs-selector-class">.d</span><span class="hljs-selector-class">.d</span><span class="hljs-selector-class">.U</span><span class="hljs-selector-class">.selectList</span> <span class="hljs-selector-attr">[BaseJdbcLogger.java : 137]</span> <span class="hljs-selector-attr">[]</span> &lt;==      Total: <span class="hljs-number">3</span><br><span class="hljs-number">2023</span>-<span class="hljs-number">10</span>-<span class="hljs-number">24</span> <span class="hljs-number">21</span>:<span class="hljs-number">40</span>:<span class="hljs-number">33</span>,<span class="hljs-number">349</span> INFO c<span class="hljs-selector-class">.h</span><span class="hljs-selector-class">.d</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.DynamicController</span> <span class="hljs-selector-attr">[DynamicController.java : 37]</span> <span class="hljs-selector-attr">[]</span> 链接：xxxx1<span class="hljs-selector-class">.xyz</span><br><span class="hljs-number">2023</span>-<span class="hljs-number">10</span>-<span class="hljs-number">24</span> <span class="hljs-number">21</span>:<span class="hljs-number">40</span>:<span class="hljs-number">33</span>,<span class="hljs-number">349</span> INFO c<span class="hljs-selector-class">.h</span><span class="hljs-selector-class">.d</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.DynamicController</span> <span class="hljs-selector-attr">[DynamicController.java : 37]</span> <span class="hljs-selector-attr">[]</span> 链接：xxxx2<span class="hljs-selector-class">.xyz</span><br><span class="hljs-number">2023</span>-<span class="hljs-number">10</span>-<span class="hljs-number">24</span> <span class="hljs-number">21</span>:<span class="hljs-number">40</span>:<span class="hljs-number">33</span>,<span class="hljs-number">350</span> INFO c<span class="hljs-selector-class">.h</span><span class="hljs-selector-class">.d</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.DynamicController</span> <span class="hljs-selector-attr">[DynamicController.java : 37]</span> <span class="hljs-selector-attr">[]</span> 链接：xxxx3<span class="hljs-selector-class">.xyz</span><br><span class="hljs-number">2023</span>-<span class="hljs-number">10</span>-<span class="hljs-number">24</span> <span class="hljs-number">21</span>:<span class="hljs-number">40</span>:<span class="hljs-number">33</span>,<span class="hljs-number">350</span> INFO c<span class="hljs-selector-class">.h</span><span class="hljs-selector-class">.d</span><span class="hljs-selector-class">.d</span><span class="hljs-selector-class">.DynamicDataSourceHolder</span> <span class="hljs-selector-attr">[DynamicDataSourceHolder.java : 23]</span> <span class="hljs-selector-attr">[]</span> 数据源切换为：db2<br><span class="hljs-number">2023</span>-<span class="hljs-number">10</span>-<span class="hljs-number">24</span> <span class="hljs-number">21</span>:<span class="hljs-number">40</span>:<span class="hljs-number">33</span>,<span class="hljs-number">350</span> INFO c<span class="hljs-selector-class">.h</span><span class="hljs-selector-class">.d</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.DynamicController</span> <span class="hljs-selector-attr">[DynamicController.java : 47]</span> <span class="hljs-selector-attr">[]</span> 数据源信息：<span class="hljs-built_in">DataSourceInfo</span>(keyCode=test, url=jdbc:mysql:<span class="hljs-comment">//sql.xxxx.xxxx.com:3306/xxxx?useSSL=false&amp;useUnicode=true&amp;autoReconnect=true&amp;failOverReadOnly=false, userName=xxxx, password=xxxx)</span><br><span class="hljs-number">2023</span>-<span class="hljs-number">10</span>-<span class="hljs-number">24</span> <span class="hljs-number">21</span>:<span class="hljs-number">40</span>:<span class="hljs-number">33</span>,<span class="hljs-number">352</span> INFO c<span class="hljs-selector-class">.a</span><span class="hljs-selector-class">.d</span><span class="hljs-selector-class">.p</span><span class="hljs-selector-class">.DruidDataSource</span> <span class="hljs-selector-attr">[DruidDataSource.java : 998]</span> <span class="hljs-selector-attr">[]</span> &#123;dataSource-<span class="hljs-number">2</span>&#125; inited<br><span class="hljs-number">2023</span>-<span class="hljs-number">10</span>-<span class="hljs-number">24</span> <span class="hljs-number">21</span>:<span class="hljs-number">40</span>:<span class="hljs-number">33</span>,<span class="hljs-number">906</span> INFO c<span class="hljs-selector-class">.h</span><span class="hljs-selector-class">.d</span><span class="hljs-selector-class">.u</span><span class="hljs-selector-class">.DataSourceUtil</span> <span class="hljs-selector-attr">[DataSourceUtil.java : 32]</span> <span class="hljs-selector-attr">[]</span> 数据源连接成功<br><span class="hljs-number">2023</span>-<span class="hljs-number">10</span>-<span class="hljs-number">24</span> <span class="hljs-number">21</span>:<span class="hljs-number">40</span>:<span class="hljs-number">33</span>,<span class="hljs-number">907</span> INFO c<span class="hljs-selector-class">.h</span><span class="hljs-selector-class">.d</span><span class="hljs-selector-class">.d</span><span class="hljs-selector-class">.DynamicDataSourceHolder</span> <span class="hljs-selector-attr">[DynamicDataSourceHolder.java : 23]</span> <span class="hljs-selector-attr">[]</span> 数据源切换为：test<br><span class="hljs-number">2023</span>-<span class="hljs-number">10</span>-<span class="hljs-number">24</span> <span class="hljs-number">21</span>:<span class="hljs-number">40</span>:<span class="hljs-number">34</span>,<span class="hljs-number">383</span> DEBUG c<span class="hljs-selector-class">.h</span><span class="hljs-selector-class">.d</span><span class="hljs-selector-class">.d</span><span class="hljs-selector-class">.U</span><span class="hljs-selector-class">.selectList</span> <span class="hljs-selector-attr">[BaseJdbcLogger.java : 137]</span> <span class="hljs-selector-attr">[]</span> ==&gt;  Preparing: SELECT id,url_name,url_str,create_time,modify_time,is_enable FROM url_cl<br><span class="hljs-number">2023</span>-<span class="hljs-number">10</span>-<span class="hljs-number">24</span> <span class="hljs-number">21</span>:<span class="hljs-number">40</span>:<span class="hljs-number">34</span>,<span class="hljs-number">384</span> DEBUG c<span class="hljs-selector-class">.h</span><span class="hljs-selector-class">.d</span><span class="hljs-selector-class">.d</span><span class="hljs-selector-class">.U</span><span class="hljs-selector-class">.selectList</span> <span class="hljs-selector-attr">[BaseJdbcLogger.java : 137]</span> <span class="hljs-selector-attr">[]</span> ==&gt; Parameters: <br><span class="hljs-number">2023</span>-<span class="hljs-number">10</span>-<span class="hljs-number">24</span> <span class="hljs-number">21</span>:<span class="hljs-number">40</span>:<span class="hljs-number">34</span>,<span class="hljs-number">427</span> DEBUG c<span class="hljs-selector-class">.h</span><span class="hljs-selector-class">.d</span><span class="hljs-selector-class">.d</span><span class="hljs-selector-class">.U</span><span class="hljs-selector-class">.selectList</span> <span class="hljs-selector-attr">[BaseJdbcLogger.java : 137]</span> <span class="hljs-selector-attr">[]</span> &lt;==      Total: <span class="hljs-number">3</span><br><span class="hljs-number">2023</span>-<span class="hljs-number">10</span>-<span class="hljs-number">24</span> <span class="hljs-number">21</span>:<span class="hljs-number">40</span>:<span class="hljs-number">34</span>,<span class="hljs-number">428</span> INFO c<span class="hljs-selector-class">.h</span><span class="hljs-selector-class">.d</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.DynamicController</span> <span class="hljs-selector-attr">[DynamicController.java : 58]</span> <span class="hljs-selector-attr">[]</span> 从表链接：hei<span class="hljs-selector-class">.fan</span><br><span class="hljs-number">2023</span>-<span class="hljs-number">10</span>-<span class="hljs-number">24</span> <span class="hljs-number">21</span>:<span class="hljs-number">40</span>:<span class="hljs-number">34</span>,<span class="hljs-number">428</span> INFO c<span class="hljs-selector-class">.h</span><span class="hljs-selector-class">.d</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.DynamicController</span> <span class="hljs-selector-attr">[DynamicController.java : 58]</span> <span class="hljs-selector-attr">[]</span> 从表链接：hei<span class="hljs-selector-class">.fan</span><br><span class="hljs-number">2023</span>-<span class="hljs-number">10</span>-<span class="hljs-number">24</span> <span class="hljs-number">21</span>:<span class="hljs-number">40</span>:<span class="hljs-number">34</span>,<span class="hljs-number">428</span> INFO c<span class="hljs-selector-class">.h</span><span class="hljs-selector-class">.d</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.DynamicController</span> <span class="hljs-selector-attr">[DynamicController.java : 58]</span> <span class="hljs-selector-attr">[]</span> 从表链接：hei<span class="hljs-selector-class">.fan</span><br><span class="hljs-number">2023</span>-<span class="hljs-number">10</span>-<span class="hljs-number">24</span> <span class="hljs-number">21</span>:<span class="hljs-number">40</span>:<span class="hljs-number">34</span>,<span class="hljs-number">428</span> INFO c<span class="hljs-selector-class">.a</span><span class="hljs-selector-class">.d</span><span class="hljs-selector-class">.p</span><span class="hljs-selector-class">.DruidDataSource</span> <span class="hljs-selector-attr">[DruidDataSource.java : 2071]</span> <span class="hljs-selector-attr">[]</span> &#123;dataSource-<span class="hljs-number">2</span>&#125; closing ...<br><span class="hljs-number">2023</span>-<span class="hljs-number">10</span>-<span class="hljs-number">24</span> <span class="hljs-number">21</span>:<span class="hljs-number">40</span>:<span class="hljs-number">34</span>,<span class="hljs-number">437</span> INFO c<span class="hljs-selector-class">.a</span><span class="hljs-selector-class">.d</span><span class="hljs-selector-class">.p</span><span class="hljs-selector-class">.DruidDataSource</span> <span class="hljs-selector-attr">[DruidDataSource.java : 2144]</span> <span class="hljs-selector-attr">[]</span> &#123;dataSource-<span class="hljs-number">2</span>&#125; closed<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>参考了一些技术博客，很有帮助，感谢！</li><li>不断试错才能成长，不能急躁，换个思路说不定会有更好的结果。</li><li>基础实现了就能更好的根据业务进行拓展了，一定要注意代码质量。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Tutorials</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>动态数据源</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux校准服务器时间</title>
    <link href="/linux_datetime/"/>
    <url>/linux_datetime/</url>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>使用date命令查看系统时间，显示正常，但日志记录里的时间是错误的。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>一台Linux服务器有两个时间源，一个是硬件时间，即服务器硬件CMOS维护的时间，还有一个是软件时间，即操作系统维护的时间，前者通过hwclock命令来访问，后者则主要通过date命令来访问。</p><p><img src="https://oss.keaijing.com/oss/icu/Snipaste_2023-10-16_14-57-04.png" alt="操作示例"></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">获取系统硬件时间</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo hwclock</span><br>Fri 23 Jan 2015 03:33:17 PM CST  -0.567492 seconds<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置操作系统的软件时间，与系统硬件时间同步</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo hwclock -s</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置系统硬件时间，与操作系统的软件时间同步</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo hwclock -w</span><br></code></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">如果系统用的是英文版的 utf8  则系统硬件时间会采用 12小时制时间表示法  即时间分为上午和下午</span><br>[root@xb-server ~]# cat /etc/locale.conf<br>LANG=&quot;en_US.UTF-8&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果系统用的是中文版的 utf8  则系统硬件时间会采用 24小时制时间表示法</span><br>[root@xb-server ~]# cat /etc/locale.conf<br>LANG=&quot;zh_CN.UTF-8&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">刷新配置文件生效</span><br>source /etc/locale.conf <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Tutorials</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>运维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git开发流程规范「v1」</title>
    <link href="/git_dev_v1/"/>
    <url>/git_dev_v1/</url>
    
    <content type="html"><![CDATA[<h2 id="分支规范"><a href="#分支规范" class="headerlink" title="分支规范"></a>分支规范</h2><blockquote><p>git 分支分为集成分支、功能分支和修复分支，分别命名为 develop、feature 和 hotfix，均为单数。不可使用 features、future、hotfixes、hotfixs 等错误名称。</p></blockquote><p>1.git主分支(master)。它是自动建立，用于发布重大版本更新（github 现在默认是是main 因种族歧视问题）<br>2.git开发主分支(develop)。日常开发在此分支上进行<br>3.git临时性分支：用于应对一些特定目的的版本开发(验证OK后，应该删除此分支)</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>功能（feature）分支：它是为了开发某种特定功能，从Develop分支上面分出来的。开发完成后，要再并入Develop。可以采用feature-的形式命名。<br><span class="hljs-bullet">- </span>预发布（release）分支：指发布正式版本之前（即合并到Master分支之前），我们可能需要有一个预发布的版本进行测试。预发布分支是从Develop分支上面分出来的，预发布结束以后，<br>必须合并进Develop和Master分支。它的命名，可以采用release-的形式。<br><span class="hljs-bullet">- </span>修补bug（hotfix）分支：软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。修补bug分支是从Master或Develop分支上面分出来的。修补结束以后，<br>再合并进Master和Develop分支。它的命名，可以采用hotfix-<span class="hljs-strong">***</span>的形式。<br></code></pre></td></tr></table></figure><h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2><blockquote><p>暂定临时分支feature、hotfix两种启用。暂不启用RP、code review。</p></blockquote><p>1.基于develop生成新临时开发分支。<br>2.测试、正式环境上线通过。<br>3.合并至develop分支，并生成对应的tag版本。<br>4.完成特定功能开发后(验证OK后，应该删除此分支)。<br>5.README.md文档中记录tag版本生成时间以及具体的功能名称。</p><p>修复bug流程</p><blockquote><p>根据最新已经上线的分支代码创建hotfix分支。</p></blockquote><p>1.基于develop或者上个tag版本(根据实际情况而定)生成新临时开发分支。<br>2.测试、正式环境上线通过。<br>3.合并至develop分支，并生成对应的tag版本。<br>4.<code>若存在临时开发分支</code>-完成特定功能开发后(验证OK后，应该删除此分支)。<br>5.<code>若存在临时开发分支</code>-临时开发分支合并已经修复bug的develop代码。<br>6.<code>若存在临时开发分支</code>-临时开发分支完成特定功能开发后(验证OK后，应该删除此分支)。<br>7.README.md文档中记录tag版本生成时间以及具体的功能名称。</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="开发尺码"><a href="#开发尺码" class="headerlink" title="开发尺码"></a>开发尺码</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs lua">git checkout develop // 切换开发分支，git pull origin develop 并同步最新的develop分支代码。（强制）<br>git checkout -b feature-sizeGroup //基于develop分支创建新的开发分支（强制）<br>git push origin craftsAddUUID:craftsAddUUID //将本地新分支推送到远程（前本地，后远程）<br>git checkout develop // feature-sizeGroup完成上线后develop分支准备合并分支（强制）<br>git merge feature-sizeGroup // 合并开发功能分支（强制）<br>git tag -a v1<span class="hljs-number">.4</span> -m <span class="hljs-string">&quot;my version 1.4&quot;</span> // 合并完成创建标签备注中简单说明开发功能（强制）<br>git push origin v1<span class="hljs-number">.4</span> // 推送tag标签到远程仓库（强制）<br>git branch -d feature-sizeGroup //删除本地的临时开发分支(非强制)<br>git push origin <span class="hljs-comment">--delete feature-sizeGroup // 删除远程的临时开发分支（强制）</span><br>vim README.md // 保存新增tag版本记录（强制）<br>git add README.md // 追踪README.md文件。（强制）<br>git commit -m <span class="hljs-string">&quot;发布新的tag&quot;</span> // 将暂存区里的改动给提交到本地的版本库（强制）<br>git push origin develop // 推送改动后的develop（强制）<br></code></pre></td></tr></table></figure><h3 id="master-合并周期"><a href="#master-合并周期" class="headerlink" title="master 合并周期"></a>master 合并周期</h3><blockquote><p>每月月底最后几个工作日完成对master 对develop分支的合并。</p></blockquote><h3 id="tag-版本命名"><a href="#tag-版本命名" class="headerlink" title="tag 版本命名"></a>tag 版本命名</h3><blockquote><p>版本命名规范</p></blockquote><ul><li>版本: v1.1.1 ( Build 101001 )</li><li>版本格式 bigVersion.middleVersion.smallVersion</li><li>bigVersion 大版本(年度或者重大更新（强制更新，老版本存在不兼容等情况）) 取值范围 1-99</li><li>middleVersion 迭代版本 取值范围 1-99</li><li>smallVersion bug修复增强发布。 取值范围 1-999</li><li>Build为版本纯数字格式化。</li></ul><h3 id="git帮助文档"><a href="#git帮助文档" class="headerlink" title="git帮助文档"></a>git帮助文档</h3><p><a href="https://gitee.com/all-about-git">git 大全</a></p>]]></content>
    
    
    <categories>
      
      <category>Tutorials</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>规范</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【ERROR】Lambda表达式无法通过编译</title>
    <link href="/error_lambda_final/"/>
    <url>/error_lambda_final/</url>
    
    <content type="html"><![CDATA[<h2 id="编译器告警内容"><a href="#编译器告警内容" class="headerlink" title="编译器告警内容"></a>编译器告警内容</h2><blockquote><p>Variable used in lambda expression should be final or effectively final</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/heifan00/img_bed@master/Work/hei-%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20230915170012.webp" alt="image"></p><p>使用IDEA给的解决方案</p><p><img src="https://cdn.jsdelivr.net/gh/heifan00/img_bed@master/Work/hei-error2_20230915170253.webp" alt="image"></p><h2 id="出现问题的原因"><a href="#出现问题的原因" class="headerlink" title="出现问题的原因"></a>出现问题的原因</h2><blockquote><p><em>lambda表达式中使用的变量应该是final或者有效的final</em>，也就是说，lambda 表达式只能引用标记了 final 的外层局部变量，这就是说不能在 lambda 内部修改定义在域外的局部变量，否则会编译错误。</p><p>如果一个变量（当前作用域）允许被第二次赋值，则 Lambda 表达式会抛出编译错误。</p></blockquote><p>Java 8 之后，在匿名类或 Lambda 表达式中访问的局部变量，如果不是 final 类型的话，编译器自动加上 final 修饰符，即Java8的特性：effectively final。</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p><strong>外部的局部变量 final 和匿名内部类里面的 final 是否是同一个变量？</strong></p><p>每个方法在执行的同时都会创建一个栈帧用于存储局部变量表、操作数栈、动态链接，方法出口等信息，每个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。</p><p>在执行方法的时候，<strong>局部变量会保存在栈中，方法结束局部变量也会出栈，随后会被垃圾回收掉</strong>，而此时，内部类对象可能还存在，如果内部类对象这时直接去访问局部变量的话就会出问题，因为外部局部变量已经被回收了，解决办法就是<strong>把匿名内部类要访问的局部变量复制一份作为内部类对象的成员变量</strong>，查阅资料或者通过反编译工具对代码进行反编译会发现，底层确实定义了一个新的变量，通过内部类构造函数将外部变量复制给内部类变量。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Java lambda 表达式可以随意引用外部变量，但如果外部变量是在当前作用域声明的，则一定不可以进行第二次赋值，哪怕是在 lambda 语句之后。</p><p><img src="https://cdn.jsdelivr.net/gh/heifan00/img_bed@master/Work/hei-error3_20230915171835.webp" alt="image"></p><h2 id="样例代码"><a href="#样例代码" class="headerlink" title="样例代码"></a>样例代码</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> streamMap() &#123;<br>    List&lt;<span class="hljs-type">Integer</span>&gt; streamList = Arrays.asList(<span class="hljs-number">10</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>);<br><br>    List&lt;<span class="hljs-type">Integer</span>&gt; oneList = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br>    List&lt;<span class="hljs-type">Integer</span>&gt; twoList = Arrays.asList(<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>);<br>    // 二次赋值<br>    oneList = Arrays.asList(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>    // 编译器给的解决方案<br>    List&lt;<span class="hljs-type">Integer</span>&gt; finalOneList = oneList;<br>    streamList.stream().<span class="hljs-keyword">forEach</span>(item -&gt; &#123;<br>        <span class="hljs-keyword">if</span> (item &gt; finalOneList.<span class="hljs-keyword">get</span>(<span class="hljs-number">0</span>))&#123;<br>            <span class="hljs-keyword">log</span>.<span class="hljs-keyword">info</span>(&quot;-----------&quot;);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">log</span>.<span class="hljs-keyword">info</span>(&quot;===========&quot;);<br>        &#125;<br>    &#125;);<br>    finalOneList = twoList;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ERROR</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux服务器使用Docker容器安装Redis</title>
    <link href="/linux_docker_redis/"/>
    <url>/linux_docker_redis/</url>
    
    <content type="html"><![CDATA[<h2 id="选择合适的Redis版本"><a href="#选择合适的Redis版本" class="headerlink" title="选择合适的Redis版本"></a>选择合适的Redis版本</h2><p>可以去docker hub中去找一下，<a href="https://hub.docker.com/_/redis?tab=tags">redis - Official Image | Docker Hub</a></p> <span id="more"></span> <p><img src="https://jsd.cdn.zzko.cn/gh/heifan00/img_bed@master/Work/hei-image.jpg"></p><p>这里我选择7.0.11版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker pull redis:7.0.11<br></code></pre></td></tr></table></figure><h2 id="新建配置文件目录及数据持久化目录"><a href="#新建配置文件目录及数据持久化目录" class="headerlink" title="新建配置文件目录及数据持久化目录"></a>新建配置文件目录及数据持久化目录</h2><blockquote><p>我放在&#x2F;docker目录下</p></blockquote><p>redis.conf文件放到配置文件目录下（没这个文件可以去官网下载）</p><p>修改配置文件信息</p><p><code>bind 127.0.0.1</code> #注释掉这部分，使redis可以外部访问&#x20;</p><p><code>daemonize no</code>#用守护线程的方式启动&#x20;</p><p><code>requirepass 你的密码</code>#给redis设置密码</p><p><code>appendonly yes</code>#redis持久化　　默认是no&#x20;</p><p><code>tcp-keepalive 300</code> #防止出现远程主机强迫关闭了一个现有的连接的错误 默认是300</p><h2 id="原神启动！"><a href="#原神启动！" class="headerlink" title="原神启动！"></a>原神启动！</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker run -p 6379:6379 --name redis -v /docker/redis/conf/redis.conf:/etc/redis/redis.conf  -v /docker/redis/data:/data -d redis:7.0.11 redis-server /etc/redis/redis.conf --appendonly <span class="hljs-built_in">yes</span><br>c8898e38c5fa49703c9d9ac7df91e36add9e112cbf67256c9a2b3e0dd96c3b28<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Tutorials</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Docker</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
